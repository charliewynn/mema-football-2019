{"version":3,"sources":["Components/Scores.js","Actions/Types.js","App.js","Actions/ScoresActions.js","Actions/PlayersActions.js","serviceWorker.js","Reducers/RootReducer.js","Reducers/ScoresReducer.js","Reducers/PlayersReducer.js","Store.js","index.js"],"names":["Scores","START_LOAD_SCORES","SCORES_LOADED","START_LOAD_PLAYERS","PLAYERS_LOADED","connect","state","ownProps","Players","dispatch","LoadScores","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","json","wrap","_context","prev","next","type","fetch","sent","scores","stop","_x","apply","this","arguments","LoadPlayers","players","useEffect","react_default","createElement","className","JSON","stringify","react_router_dom","react_router","exact","path","render","component","Boolean","window","location","hostname","match","combineReducers","length","undefined","loading","action","initialState","ReactDOM","es","store","createStore","rootReducer","applyMiddleware","thunk","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.047d8b4f.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nfunction Scores(){\r\n\r\n    return (<div>scores page</div>)\r\n}\r\nexport default Scores;","export const START_LOAD_SCORES = \"START_LOAD_SCORES\";\r\nexport const SCORES_LOADED = \"SCORES_LOADED\";\r\n\r\nexport const START_LOAD_PLAYERS = \"START_LOAD_PLAYERS\";\r\nexport const PLAYERS_LOADED = \"PLAYERS_LOADED\";","import React, {useEffect, useState} from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Scores from './Components/Scores';\nimport { connect } from 'react-redux';\nimport { LoadScoresAction } from \"./Actions/ScoresActions\";\nimport { LoadPlayersAction } from './Actions/PlayersActions';\n\nfunction App({LoadScores, Scores, LoadPlayers, Players}) {\n  useEffect(()=>{\n    LoadScores();\n    LoadPlayers();\n  },[]);\n  \n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {JSON.stringify(Scores)}\n        </p>\n        <p>\n          {JSON.stringify(Players)}\n        </p>\n      </header>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" render={()=><div>home</div>}></Route>\n          <Route exact path=\"/players\" render={()=><div>players</div>}></Route>\n          <Route exact path=\"/players/:name\" render={()=><div>players2</div>}></Route>\n          <Route exact path=\"/scores\" component={Scores}></Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state,ownProps) => ({\n  Scores: state.Scores,\n  Players: state.Players\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    LoadScores: () => dispatch(LoadScoresAction()),\n    LoadPlayers: () => dispatch(LoadPlayersAction()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { START_LOAD_SCORES, SCORES_LOADED } from \"./Types\";\r\n\r\nconst scoresURL = 'https://api.sheety.co/63dbeee0-3aa4-4e79-ac39-545ac3ee7b86';\r\n\r\nexport const StartLoadScores = ()=>({\r\n    type:START_LOAD_SCORES,\r\n});\r\n\r\nexport const ScoresLoaded = scores => ({\r\n    type:SCORES_LOADED,\r\n    scores\r\n});\r\n\r\nexport const LoadScoresAction = ()=>{\r\n    return async (dispatch) =>{\r\n        dispatch(StartLoadScores());\r\n        const response = await fetch(scoresURL);\r\n        const json = await response.json();\r\n        dispatch(ScoresLoaded(json));\r\n    }\r\n}","import { START_LOAD_PLAYERS, PLAYERS_LOADED } from \"./Types\";\r\n\r\nconst scoresURL = 'https://api.sheety.co/d50d6864-69d7-46b3-b39d-a4ea29480254';\r\n\r\nexport const StartLoadPlayers = ()=>({\r\n    type:START_LOAD_PLAYERS,\r\n});\r\n\r\nexport const PlayersLoaded = players => ({\r\n    type:PLAYERS_LOADED,\r\n    players\r\n});\r\n\r\nexport const LoadPlayersAction = ()=>{\r\n    return async (dispatch) =>{\r\n        dispatch(StartLoadPlayers());\r\n        const response = await fetch(scoresURL);\r\n        const json = await response.json();\r\n        dispatch(PlayersLoaded(json));\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport Scores from \"./ScoresReducer\";\r\nimport Players from \"./PlayersReducer\";\r\n\r\nexport default combineReducers({ Scores, Players });\r\n","import { START_LOAD_SCORES, SCORES_LOADED } from '../Actions/Types';\r\n\r\nexport default function ScoresReducer(state = { scores:[], loading: false }, action) {\r\n  switch (action.type) {\r\n    case START_LOAD_SCORES:\r\n      return {loading:true};\r\n    case SCORES_LOADED:\r\n      return {scores: action.scores, loading:false};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { START_LOAD_PLAYERS, PLAYERS_LOADED } from \"../Actions/Types\";\r\n\r\nexport default function PlayersReducer(state = { players:[], loading: false }, action) {\r\n  switch (action.type) {\r\n    case START_LOAD_PLAYERS:\r\n      return {loading:true};\r\n    case PLAYERS_LOADED:\r\n      return {players: action.players, loading:false};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './Reducers/RootReducer';\r\n\r\nconst initialState = {};\r\n\r\nexport default function configureStore() {\r\n  return createStore(rootReducer, initialState, applyMiddleware(thunk));\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from \"./Store\"\nimport { Provider } from 'react-redux';\n\nReactDOM.render(<Provider store={configureStore()}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}