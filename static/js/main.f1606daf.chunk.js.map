{"version":3,"sources":["Components/Home.js","Components/Scores.js","Actions/Types.js","App.js","Actions/ScoresActions.js","Actions/PlayersActions.js","serviceWorker.js","Reducers/RootReducer.js","Reducers/ScoresReducer.js","Reducers/PlayersReducer.js","Store.js","index.js"],"names":["connect","state","Scores","Players","react_default","a","createElement","react_router_dom","to","_ref","JSON","stringify","START_LOAD_SCORES","SCORES_LOADED","START_LOAD_PLAYERS","PLAYERS_LOADED","ownProps","dispatch","LoadScores","Object","asyncToGenerator","regenerator_default","mark","_callee","response","json","wrap","_context","prev","next","type","fetch","sent","scores","stop","_x","apply","this","arguments","LoadPlayers","players","useEffect","console","log","process","className","basename","react_router","exact","path","component","HomeComponent","render","ScoresComponent","Boolean","window","location","hostname","match","combineReducers","length","undefined","loading","action","initialState","ReactDOM","es","store","createStore","rootReducer","applyMiddleware","thunk","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1606daf.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Home(){\r\n\r\n    return (<div>\r\n        <h2>Home</h2>\r\n        <Link to=\"/scores\">Scores</Link>\r\n    </div>)\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  Scores: state.Scores,\r\n  Players: state.Players\r\n});\r\n\r\nexport default connect(mapStateToProps)(Home);","import React, {useEffect, useState} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Scores({Scores}){\r\n\r\n    return (<div>scores page<div>{JSON.stringify(Scores)}</div></div>)\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  Scores: state.Scores,\r\n  Players: state.Players\r\n});\r\n\r\nexport default connect(mapStateToProps)(Scores);","export const START_LOAD_SCORES = \"START_LOAD_SCORES\";\r\nexport const SCORES_LOADED = \"SCORES_LOADED\";\r\n\r\nexport const START_LOAD_PLAYERS = \"START_LOAD_PLAYERS\";\r\nexport const PLAYERS_LOADED = \"PLAYERS_LOADED\";","import React, {useEffect} from 'react';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\nimport './App.css';\nimport HomeComponent from './Components/Home';\nimport ScoresComponent from './Components/Scores';\nimport { connect } from 'react-redux';\nimport { LoadScoresAction } from \"./Actions/ScoresActions\";\nimport { LoadPlayersAction } from './Actions/PlayersActions';\n\nfunction App({LoadScores, Scores, LoadPlayers, Players}) {\n  useEffect(()=>{\n    LoadScores();\n    LoadPlayers();\n  },[]);\n  console.log(\"url\", process.env.PUBLIC_URL);\n  \n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Mema Football Pool 2019\n      </header>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={HomeComponent}></Route>\n          <Route exact path=\"/players\" render={()=><div>players</div>}></Route>\n          <Route exact path=\"/players/:name\" render={()=><div>players2</div>}></Route>\n          <Route exact path=\"/scores\" component={ScoresComponent}></Route>\n        </Switch>\n      </BrowserRouter>\n        <p>\n          {JSON.stringify(Players)}\n        </p>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state,ownProps) => ({\n  Scores: state.Scores,\n  Players: state.Players\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    LoadScores: () => dispatch(LoadScoresAction()),\n    LoadPlayers: () => dispatch(LoadPlayersAction()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { START_LOAD_SCORES, SCORES_LOADED } from \"./Types\";\r\n\r\nconst scoresURL = 'https://api.sheety.co/63dbeee0-3aa4-4e79-ac39-545ac3ee7b86';\r\n\r\nexport const StartLoadScores = ()=>({\r\n    type:START_LOAD_SCORES,\r\n});\r\n\r\nexport const ScoresLoaded = scores => ({\r\n    type:SCORES_LOADED,\r\n    scores\r\n});\r\n\r\nexport const LoadScoresAction = ()=>{\r\n    return async (dispatch) =>{\r\n        dispatch(StartLoadScores());\r\n        const response = await fetch(scoresURL);\r\n        const json = await response.json();\r\n        dispatch(ScoresLoaded(json));\r\n    }\r\n}","import { START_LOAD_PLAYERS, PLAYERS_LOADED } from \"./Types\";\r\n\r\nconst scoresURL = 'https://api.sheety.co/d50d6864-69d7-46b3-b39d-a4ea29480254';\r\n\r\nexport const StartLoadPlayers = ()=>({\r\n    type:START_LOAD_PLAYERS,\r\n});\r\n\r\nexport const PlayersLoaded = players => ({\r\n    type:PLAYERS_LOADED,\r\n    players\r\n});\r\n\r\nexport const LoadPlayersAction = ()=>{\r\n    return async (dispatch) =>{\r\n        dispatch(StartLoadPlayers());\r\n        const response = await fetch(scoresURL);\r\n        const json = await response.json();\r\n        dispatch(PlayersLoaded(json));\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport Scores from \"./ScoresReducer\";\r\nimport Players from \"./PlayersReducer\";\r\n\r\nexport default combineReducers({ Scores, Players });\r\n","import { START_LOAD_SCORES, SCORES_LOADED } from '../Actions/Types';\r\n\r\nexport default function ScoresReducer(state = { scores:[], loading: false }, action) {\r\n  switch (action.type) {\r\n    case START_LOAD_SCORES:\r\n      return {loading:true};\r\n    case SCORES_LOADED:\r\n      return {scores: action.scores, loading:false};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { START_LOAD_PLAYERS, PLAYERS_LOADED } from \"../Actions/Types\";\r\n\r\nexport default function PlayersReducer(state = { players:[], loading: false }, action) {\r\n  switch (action.type) {\r\n    case START_LOAD_PLAYERS:\r\n      return {loading:true};\r\n    case PLAYERS_LOADED:\r\n      return {players: action.players, loading:false};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './Reducers/RootReducer';\r\n\r\nconst initialState = {};\r\n\r\nexport default function configureStore() {\r\n  return createStore(rootReducer, initialState, applyMiddleware(thunk));\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from \"./Store\"\nimport { Provider } from 'react-redux';\n\nReactDOM.render(<Provider store={configureStore()}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}